// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: process.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProcessClient is the client API for Process service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessClient interface {
	StartWorker(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	StopWorker(ctx context.Context, in *PidRequest, opts ...grpc.CallOption) (*Response, error)
	RestartWorker(ctx context.Context, in *PidRequest, opts ...grpc.CallOption) (*Response, error)
	WorkerStateCheck(ctx context.Context, in *PidRequest, opts ...grpc.CallOption) (*Response, error)
}

type processClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessClient(cc grpc.ClientConnInterface) ProcessClient {
	return &processClient{cc}
}

func (c *processClient) StartWorker(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/Process/StartWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processClient) StopWorker(ctx context.Context, in *PidRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Process/StopWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processClient) RestartWorker(ctx context.Context, in *PidRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Process/RestartWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processClient) WorkerStateCheck(ctx context.Context, in *PidRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Process/WorkerStateCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcessServer is the server API for Process service.
// All implementations should embed UnimplementedProcessServer
// for forward compatibility
type ProcessServer interface {
	StartWorker(context.Context, *StartRequest) (*StartResponse, error)
	StopWorker(context.Context, *PidRequest) (*Response, error)
	RestartWorker(context.Context, *PidRequest) (*Response, error)
	WorkerStateCheck(context.Context, *PidRequest) (*Response, error)
}

// UnimplementedProcessServer should be embedded to have forward compatible implementations.
type UnimplementedProcessServer struct {
}

func (UnimplementedProcessServer) StartWorker(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartWorker not implemented")
}
func (UnimplementedProcessServer) StopWorker(context.Context, *PidRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopWorker not implemented")
}
func (UnimplementedProcessServer) RestartWorker(context.Context, *PidRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartWorker not implemented")
}
func (UnimplementedProcessServer) WorkerStateCheck(context.Context, *PidRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkerStateCheck not implemented")
}

// UnsafeProcessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessServer will
// result in compilation errors.
type UnsafeProcessServer interface {
	mustEmbedUnimplementedProcessServer()
}

func RegisterProcessServer(s grpc.ServiceRegistrar, srv ProcessServer) {
	s.RegisterService(&Process_ServiceDesc, srv)
}

func _Process_StartWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServer).StartWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Process/StartWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServer).StartWorker(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Process_StopWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServer).StopWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Process/StopWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServer).StopWorker(ctx, req.(*PidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Process_RestartWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServer).RestartWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Process/RestartWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServer).RestartWorker(ctx, req.(*PidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Process_WorkerStateCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServer).WorkerStateCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Process/WorkerStateCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServer).WorkerStateCheck(ctx, req.(*PidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Process_ServiceDesc is the grpc.ServiceDesc for Process service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Process_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Process",
	HandlerType: (*ProcessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartWorker",
			Handler:    _Process_StartWorker_Handler,
		},
		{
			MethodName: "StopWorker",
			Handler:    _Process_StopWorker_Handler,
		},
		{
			MethodName: "RestartWorker",
			Handler:    _Process_RestartWorker_Handler,
		},
		{
			MethodName: "WorkerStateCheck",
			Handler:    _Process_WorkerStateCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "process.proto",
}
